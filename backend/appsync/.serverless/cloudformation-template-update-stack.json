{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "SendEmailLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/SendEmail-Dev"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "potluck-appsync",
                  "Dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/SendEmail-Dev:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/SendEmail-Dev:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "potluck-appsync",
              "Dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "SendEmailLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/potluck-appsync/Dev/1615433512533-2021-03-11T03:31:52.533Z/sendEmail.zip"
        },
        "FunctionName": "SendEmail-Dev",
        "Handler": "index.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 30,
        "Description": "This lambda invokes the invite business step function",
        "Tags": [
          {
            "Key": "Potluck",
            "Value": "Potluck"
          },
          {
            "Key": "ByBlk",
            "Value": "ByBlk"
          }
        ],
        "Environment": {
          "Variables": {
            "SENDGRID_API_KEY": "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"
          }
        }
      },
      "DependsOn": [
        "SendEmailLogGroup"
      ]
    },
    "SendEmailLambdaVersionSMY62mMjF29muA8bIiUdRthBCCkLcyIS1toj9uABsrg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SendEmailLambdaFunction"
        },
        "CodeSha256": "+DTY2assofF7ElvqdODfD/XlIcXFNj6khtm0FoG3Nfc=",
        "Description": "This lambda invokes the invite business step function"
      }
    },
    "BusinessTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "PotluckBusinessTable-Dev",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "slug",
            "AttributeType": "S"
          },
          {
            "AttributeName": "csc",
            "AttributeType": "S"
          },
          {
            "AttributeName": "region",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "csc-index",
            "KeySchema": [
              {
                "AttributeName": "region",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "csc",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          },
          {
            "IndexName": "slug-index",
            "KeySchema": [
              {
                "AttributeName": "slug",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "csc",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ]
      }
    },
    "UserTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "PotluckUserTable-Dev",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "GraphQlApi": {
      "Type": "AWS::AppSync::GraphQLApi",
      "Properties": {
        "Name": "PotluckAppsync-Dev",
        "AuthenticationType": "AMAZON_COGNITO_USER_POOLS",
        "AdditionalAuthenticationProviders": [
          {
            "AuthenticationType": "AWS_IAM"
          },
          {
            "AuthenticationType": "API_KEY"
          }
        ],
        "UserPoolConfig": {
          "AwsRegion": "us-east-1",
          "UserPoolId": "us-east-1_3NAAjhsu9",
          "DefaultAction": "ALLOW"
        },
        "XrayEnabled": false
      }
    },
    "GraphQlApiKeyDefault": {
      "Type": "AWS::AppSync::ApiKey",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Description": "Auto-generated api key",
        "Expires": 1646967600
      }
    },
    "GraphQlSchema": {
      "Type": "AWS::AppSync::GraphQLSchema",
      "Properties": {
        "Definition": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ntype Query {\n  getUserByIdentity(id: ID!): User @aws_cognito_user_pools\n\n  getBusinessesWithOptions(\n    region: String!\n    csc: String!     filter: BusinessFilterInput\n    limit: Int\n    nextToken: String\n  ): BusinessConnection @aws_cognito_user_pools @aws_api_key\n\n  getFeaturedBusinesses(\n    filter: BusinessFilterInput\n    limit: Int\n    nextToken: String\n  ): BusinessConnection @aws_cognito_user_pools @aws_api_key\n\n  getBusinessByLocationAndSlug(csc: String!, slug: String!): BusinessConnection\n    @aws_cognito_user_pools\n    @aws_api_key\n\n  getBusinessBySlug(slug: String!): BusinessConnection\n    @aws_cognito_user_pools\n    @aws_api_key\n}\n\ntype Mutation {\n  createUser(input: UserInput!): User @aws_iam\n  updateUserSettings(input: SettingsInput!): User @aws_cognito_user_pools\n  createBusiness(input: CreateBusinessInput!): Business\n    @aws_iam\n    @aws_cognito_user_pools\n    @aws_auth(cognito_groups: [\"Admin\"])\n  updateBusiness(input: EditBusinessInput!): Business\n    @aws_iam\n    @aws_cognito_user_pools\n    @aws_auth(cognito_groups: [\"Admin, Business\"])\n  sendEmail(input: SendEmailInput!): Boolean @aws_cognito_user_pools\n}\n\ninput SendEmailInput {\n  firstName: String!\n  lastName: String!\n  address: String!\n  city: String!\n  zip: String!\n  phone: String!\n  businessEmail: String!\n  merch: [String!]!\n  gifts: [String!]!\n  paymentMethod: String!\n  preferredStrain: String!\n  quantity: String!\n}\n\ntype User @aws_cognito_user_pools {\n  id: ID!\n  settings: UserSettings\n}\n\ninput UserInput {\n  id: ID!\n  settings: SettingsInput\n}\n\ntype UserSettings @aws_cognito_user_pools {\n  darkMode: Boolean\n  favorites: [Business]\n}\n\ninput SettingsInput {\n  darkMode: Boolean\n  favorites: [String]\n}\n\nenum State {\n  nj\n}\n\ntype MenuItem @aws_cognito_user_pools @aws_iam @aws_api_key {\n  title: String\n  items: [String]\n}\n\ninput MenuItemInput @aws_cognito_user_pools @aws_iam {\n  title: String\n  items: [String]\n}\n\ntype Business @aws_cognito_user_pools @aws_iam @aws_api_key {\n  id: ID!\n  region: State!\n  slug: String!\n  title: String!\n  email: String!\n  description: String\n  avatar: String\n  menu: [MenuItem]\n}\n\ntype BusinessConnection @aws_iam @aws_cognito_user_pools @aws_api_key {\n  items: [Business]\n  nextToken: String\n}\n\ninput BusinessFilterInput {\n  tags: [TableStringFilterInput]\n  industry: TableStringFilterInput\n}\n\ninput CreateBusinessInput {\n  region: State!\n  slug: String!\n  title: String!\n  email: String!\n  description: String\n  avatar: String\n  menu: [MenuItemInput]\n}\n\ninput EditBusinessInput {\n  id: ID\n  description: String\n  avatar: String\n  menu: [MenuItemInput]\n}\n\n\ninput TableBooleanFilterInput {\n  eq: Boolean\n  ne: Boolean\n}\n\ninput TableFloatFilterInput {\n  between: [Float]\n  contains: Float\n  eq: Float\n  ge: Float\n  gt: Float\n  le: Float\n  lt: Float\n  ne: Float\n  notContains: Float\n}\n\ninput TableIDFilterInput {\n  beginsWith: ID\n  between: [ID]\n  contains: ID\n  eq: ID\n  ge: ID\n  gt: ID\n  le: ID\n  lt: ID\n  ne: ID\n  notContains: ID\n}\n\ninput TableIntFilterInput {\n  between: [Int]\n  contains: Int\n  eq: Int\n  ge: Int\n  gt: Int\n  le: Int\n  lt: Int\n  ne: Int\n  notContains: Int\n}\n\ninput TableStringFilterInput {\n  beginsWith: String\n  between: [String]\n  contains: String\n  eq: String\n  ge: String\n  gt: String\n  le: String\n  lt: String\n  ne: String\n  notContains: String\n}\n",
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        }
      }
    },
    "GraphQlDsBusinessTableRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "appsync.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "GraphQlDsBusinessTablePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "dynamodb:DeleteItem",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:UpdateItem",
                    "dynamodb:BatchGetItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:ConditionCheckItem"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn",
                          "aws",
                          "dynamodb",
                          "us-east-1",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          {
                            "Fn::Join": [
                              "/",
                              [
                                "table",
                                "PotluckBusinessTable-Dev"
                              ]
                            ]
                          }
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "/",
                        [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn",
                                "aws",
                                "dynamodb",
                                "us-east-1",
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                {
                                  "Fn::Join": [
                                    "/",
                                    [
                                      "table",
                                      "PotluckBusinessTable-Dev"
                                    ]
                                  ]
                                }
                              ]
                            ]
                          },
                          "*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "GraphQlDsUserTableRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "appsync.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "GraphQlDsUserTablePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "dynamodb:DeleteItem",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:UpdateItem",
                    "dynamodb:BatchGetItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:ConditionCheckItem"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn",
                          "aws",
                          "dynamodb",
                          "us-east-1",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          {
                            "Fn::Join": [
                              "/",
                              [
                                "table",
                                "PotluckUserTable-Dev"
                              ]
                            ]
                          }
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "/",
                        [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn",
                                "aws",
                                "dynamodb",
                                "us-east-1",
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                {
                                  "Fn::Join": [
                                    "/",
                                    [
                                      "table",
                                      "PotluckUserTable-Dev"
                                    ]
                                  ]
                                }
                              ]
                            ]
                          },
                          "*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "GraphQlDsSendEmailLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "appsync.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "GraphQlDsSendEmailLambdaPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "lambda:invokeFunction"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:lambda:us-east-1:185477522948:function:SendEmail-Dev",
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn:aws:lambda:us-east-1:185477522948:function:SendEmail-Dev",
                          "*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "GraphQlDsBusinessTable": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "BusinessTable",
        "Type": "AMAZON_DYNAMODB",
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "GraphQlDsBusinessTableRole",
            "Arn"
          ]
        },
        "DynamoDBConfig": {
          "AwsRegion": "us-east-1",
          "TableName": "PotluckBusinessTable-Dev",
          "UseCallerCredentials": false,
          "Versioned": false
        }
      }
    },
    "GraphQlDsUserTable": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "UserTable",
        "Type": "AMAZON_DYNAMODB",
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "GraphQlDsUserTableRole",
            "Arn"
          ]
        },
        "DynamoDBConfig": {
          "AwsRegion": "us-east-1",
          "TableName": "PotluckUserTable-Dev",
          "UseCallerCredentials": false,
          "Versioned": false
        }
      }
    },
    "GraphQlDsSendEmailLambda": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "SendEmailLambda",
        "Type": "AWS_LAMBDA",
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "GraphQlDsSendEmailLambdaRole",
            "Arn"
          ]
        },
        "LambdaConfig": {
          "LambdaFunctionArn": "arn:aws:lambda:us-east-1:185477522948:function:SendEmail-Dev"
        }
      }
    },
    "GraphQlResolverQuerygetBusinessesWithOptions": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getBusinessesWithOptions",
        "RequestMappingTemplate": "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"Query\",\n    \"query\" : {\n        \"expression\" : \"#region = :region and begins_with(csc, :csc)\",\n        \"expressionNames\": {\n            \"#region\" : \"region\"\n        },\n        \"expressionValues\" : {\n            \":csc\": { \"S\" : \"$context.args.csc\" },\n            \":region\": { \"S\" : \"$context.args.region\" },\n        }\n    },\n    \"index\" : \"csc-index\",\n    \"nextToken\" : $util.toJson($util.defaultIfNullOrEmpty($ctx.args.nextToken, null)),\n    \"scanIndexForward\" : false,\n    \"limit\" : $util.defaultIfNull($context.args.limit, 20),\n    \"consistentRead\" : false,\n    \"select\" : \"ALL_ATTRIBUTES\",\n    \"filter\" : #if($context.args.filter) $util.transform.toDynamoDBFilterExpression($ctx.args.filter) #else null #end,\n}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "Kind": "UNIT",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsBusinessTable",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverQuerygetBusinessByLocationAndSlug": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getBusinessByLocationAndSlug",
        "RequestMappingTemplate": "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"Query\",\n    \"query\" : {\n        \"expression\" : \"#slug = :slug and #csc = :csc\",\n        \"expressionNames\": {\n            \"#slug\" : \"slug\",\n            \"#csc\" : \"csc\"\n        },\n        \"expressionValues\" : {\n            \":slug\": { \"S\" : \"$context.args.slug\" },\n            \":csc\": { \"S\" : \"$context.args.csc\" },\n        }\n    },\n    \"index\" : \"slug-index\",\n    \"nextToken\" : $util.toJson($util.defaultIfNullOrEmpty($ctx.args.nextToken, null)),\n    \"scanIndexForward\" : false,\n    \"limit\" : $util.defaultIfNull($context.args.limit, 20),\n    \"consistentRead\" : false,\n    \"select\" : \"ALL_ATTRIBUTES\",\n    \"filter\" : #if($context.args.filter) $util.transform.toDynamoDBFilterExpression($ctx.args.filter) #else null #end,\n}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "Kind": "UNIT",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsBusinessTable",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverQuerygetFeaturedBusinesses": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getFeaturedBusinesses",
        "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"Scan\",\n  \"filter\": #if($context.args.filter) $util.transform.toDynamoDBFilterExpression($ctx.args.filter) #else null #end,\n  \"limit\": $util.defaultIfNull($ctx.args.limit, 20),\n  \"nextToken\": $util.toJson($util.defaultIfNullOrEmpty($ctx.args.nextToken, null)),\n}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "Kind": "UNIT",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsBusinessTable",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverQuerygetBusinessBySlug": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getBusinessBySlug",
        "RequestMappingTemplate": "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"Query\",\n    \"query\" : {\n        \"expression\" : \"#slug = :slug\",\n        \"expressionNames\": {\n            \"#slug\" : \"slug\"\n        },\n        \"expressionValues\" : {\n            \":slug\": { \"S\" : \"$context.args.slug\" },\n        }\n    },\n    \"index\" : \"slug-index\",\n    \"nextToken\" : $util.toJson($util.defaultIfNullOrEmpty($ctx.args.nextToken, null)),\n    \"scanIndexForward\" : false,\n    \"limit\" : $util.defaultIfNull($context.args.limit, 20),\n    \"consistentRead\" : false,\n    \"select\" : \"ALL_ATTRIBUTES\",\n    \"filter\" : #if($context.args.filter) $util.transform.toDynamoDBFilterExpression($ctx.args.filter) #else null #end,\n}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "Kind": "UNIT",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsBusinessTable",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverQuerygetUserByIdentity": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getUserByIdentity",
        "RequestMappingTemplate": "{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"GetItem\",\n    \"key\": {\n        \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id),\n    }\n}",
        "ResponseMappingTemplate": "#if($context.result[\"owner\"] == $context.identity.username)\n    $utils.toJson($context.result);\n#else\n    $utils.unauthorized()\n#end",
        "Kind": "UNIT",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsUserTable",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverMutationcreateBusiness": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "createBusiness",
        "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"PutItem\",\n  \"key\": {\n    \"id\": #if($ctx.args.input.id) $util.dynamodb.toDynamoDBJson($ctx.args.input.id) #else $util.dynamodb.toDynamoDBJson($util.autoId()) #end,\n  },\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($ctx.args.input),\n  \"condition\": {\n    \"expression\": \"attribute_not_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\",\n    },\n  },\n}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "Kind": "UNIT",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsBusinessTable",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverMutationupdateBusiness": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "updateBusiness",
        "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n   \"condition\" : {\n      \"expression\": \"contains(#canAccess, :expectedOwner)\",\n        \"expressionNames\": {\n          \"#canAccess\": \"canAccess\"\n      },\n      \"expressionValues\": {\n        \":expectedOwner\": { \"S\": \"${context.identity.username}\" },\n      }\n  }\n}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "Kind": "UNIT",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsBusinessTable",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverMutationcreateUser": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "createUser",
        "RequestMappingTemplate": "#set( $args  = $ctx.args.input )\n#set($argsWithOwner = $args.put(\"owner\", ${context.identity.username}))\n\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"PutItem\",\n  \"key\": {\n    \"id\": #if($ctx.args.input.id) $util.dynamodb.toDynamoDBJson($ctx.args.input.id) #else $util.dynamodb.toDynamoDBJson($util.autoId()) #end,\n  },\n  \"attributeValues\" : $util.dynamodb.toMapValuesJson($args),\n  \"condition\": {\n    \"expression\": \"attribute_not_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\",\n    },\n  },\n}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "Kind": "UNIT",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsUserTable",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverMutationupdateUserSettings": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "updateUserSettings",
        "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  },\n   \"condition\" : {\n      \"expression\": \"contains(#canAccess, :expectedOwner)\",\n        \"expressionNames\": {\n          \"#canAccess\": \"canAccess\"\n      },\n      \"expressionValues\": {\n        \":expectedOwner\": { \"S\": \"${context.identity.username}\" },\n      }\n  }\n}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "Kind": "UNIT",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsUserTable",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverMutationsendEmail": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "sendEmail",
        "RequestMappingTemplate": "  {\n    \"operation\": \"Invoke\",\n    \"version\" : \"2018-05-29\",\n    \"payload\": {\n        \"order\": $utils.toJson($context.arguments.input)\n    }\n  }",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "Kind": "UNIT",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsSendEmailLambda",
            "Name"
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "SendEmailLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SendEmailLambdaVersionSMY62mMjF29muA8bIiUdRthBCCkLcyIS1toj9uABsrg"
      }
    },
    "GraphQlApiId": {
      "Value": {
        "Fn::GetAtt": [
          "GraphQlApi",
          "ApiId"
        ]
      }
    },
    "GraphQlApiUrl": {
      "Value": {
        "Fn::GetAtt": [
          "GraphQlApi",
          "GraphQLUrl"
        ]
      }
    },
    "GraphQlApiKeyDefault": {
      "Value": {
        "Fn::GetAtt": [
          "GraphQlApiKeyDefault",
          "ApiKey"
        ]
      }
    }
  }
}