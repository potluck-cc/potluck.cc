schema {
  query: Query
  mutation: Mutation
}

type Query {
  getUserByIdentity: User @aws_cognito_user_pools

  getUserById(id: ID!): User @aws_iam

  getBusinessesWithOptions(
    region: String!
    csc: String! #country_state_city
    filter: BusinessFilterInput
    limit: Int
    nextToken: String
  ): BusinessConnection @aws_cognito_user_pools @aws_api_key

  getFeaturedBusinesses(
    filter: BusinessFilterInput
    limit: Int
    nextToken: String
  ): BusinessConnection @aws_cognito_user_pools @aws_api_key

  getBusinessByLocationAndSlug(csc: String!, slug: String!): BusinessConnection
    @aws_cognito_user_pools
    @aws_api_key

  getBusinessBySlug(slug: String!): BusinessConnection
    @aws_cognito_user_pools
    @aws_api_key

  getBusinessReviews(businessId: ID!): ReviewConnection
    @aws_cognito_user_pools
    @aws_api_key
}

type Mutation {
  createUser(input: UserInput!): User @aws_iam

  updateUser(input: UserInput!): User @aws_iam @aws_cognito_user_pools

  updateUserSettings(input: SettingsInput!): User @aws_cognito_user_pools

  createBusiness(input: CreateBusinessInput!): Business
    @aws_iam
    @aws_cognito_user_pools
    @aws_auth(cognito_groups: ["Admin"])

  updateBusiness(input: EditBusinessInput!): Business
    @aws_iam
    @aws_cognito_user_pools
    @aws_auth(cognito_groups: ["Admin, Business"])

  sendEmail(input: SendEmailInput!): Boolean
    @aws_cognito_user_pools
    @aws_api_key

  startCheckoutSession(priceId: String!, redirect_url: String): String!
    @aws_cognito_user_pools

  completeCheckoutSession(sessionId: String!): String! @aws_cognito_user_pools

  createPortalSession(customerId: String!): String! @aws_cognito_user_pools

  addReview(input: AddReviewInput!): Review!
    @aws_cognito_user_pools
    @aws_api_key

  deleteReview(input: DeleteReviewInput!): Review! @aws_cognito_user_pools
}

type Review @aws_cognito_user_pools @aws_api_key {
  id: ID!
  userId: ID!
  text: String!
  createdAt: Int!
  username: String
}

input AddReviewInput {
  id: ID!
  userId: ID!
  text: String!
  createdAt: Int!
  username: String
}

input DeleteReviewInput {
  id: ID!
  createdAt: Int!
}

type ReviewConnection @aws_cognito_user_pools @aws_api_key {
  items: [Review]
  nextToken: String
}

input SendEmailInput {
  name: String!
  city: String!
  phone: String!
  businessEmail: String!
  preferredStrain: [String!]!
  gifts: [String!]!
  paymentMethod: String!
  quantity: String!
}

type User @aws_cognito_user_pools @aws_iam {
  id: ID!
  stripeCustomerId: String
  subscribed: Boolean # isUserSubscribedLambda
  settings: UserSettings
  username: String
}

input UserInput {
  id: ID!
  stripeCustomerId: String
  username: String
}

type UserSettings @aws_cognito_user_pools @aws_iam {
  darkMode: Boolean
  favorites: [Business]
}

input SettingsInput {
  darkMode: Boolean
  favorites: [String]
}

enum State {
  nj
}

type MenuItem @aws_cognito_user_pools @aws_iam @aws_api_key {
  title: String
  items: [String]
}

input MenuItemInput @aws_cognito_user_pools @aws_iam {
  title: String
  items: [String]
}

type Business @aws_cognito_user_pools @aws_iam @aws_api_key {
  id: ID!
  region: State!
  slug: String!
  title: String!
  email: String!
  description: String
  avatar: String
  menu: [MenuItem]
  deliveryLocations: [String]
}

type BusinessConnection @aws_iam @aws_cognito_user_pools @aws_api_key {
  items: [Business]
  nextToken: String
}

input BusinessFilterInput {
  tags: [TableStringFilterInput]
  industry: TableStringFilterInput
}

input CreateBusinessInput {
  region: State!
  slug: String!
  title: String!
  email: String!
  description: String
  avatar: String
  menu: [MenuItemInput]
}

input EditBusinessInput {
  id: ID
  description: String
  avatar: String
  menu: [MenuItemInput]
  deliveryLocations: [String]
}

####### boilerplate #######

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}
